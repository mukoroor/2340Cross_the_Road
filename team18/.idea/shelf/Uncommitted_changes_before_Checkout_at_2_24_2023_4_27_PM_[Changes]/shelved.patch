Index: app/src/main/java/com/example/team18/GameScreenActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.team18;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class GameScreenActivity extends AppCompatActivity {\r\n    private int difficulty;\r\n    private int finalHeight, finalWidth;\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_game_screen);\r\n\r\n        //Establishes player details\r\n        Sprite player = Sprite.parseString(getPlayerInfo());\r\n        ImageView playerImage = findViewById(R.id.player);\r\n        int spriteImageIndex = player.getSpriteIndex();\r\n\r\n        //Sets player image on screen\r\n        playerImage.setImageResource(Sprite.spriteOptions[spriteImageIndex][0]);\r\n\r\n        //Sets player name on screen\r\n        TextView playerName = findViewById(R.id.username);\r\n        playerName.setText(player.getName());\r\n\r\n        //Sets player lives on screen\r\n        TextView playerLives = findViewById(R.id.playerLives);\r\n        playerLives.setText(String.valueOf(player.getLives()));\r\n\r\n        //Creates background\r\n        createGrid(findViewById(R.id.backgroundGrid));\r\n        int[] rows = populateGrid();\r\n        final FrameLayout iv = (FrameLayout) findViewById(R.id.mainFrame);\r\n        finalHeight = iv.getMeasuredHeight();\r\n        finalWidth = iv.getMeasuredWidth();\r\n\r\n        //Animates rows on screen\r\n        animate(rows);\r\n\r\n        //Big O Code\r\n        //int displayWidth = Resources.getSystem().getDisplayMetrics().widthPixels;\r\n        //int difficulty= getGameDifficulty();\r\n        //Game currentGame = new Game(player, difficulty, displayWidth);\r\n\r\n\r\n        //The action events for the leftButton and the placement of the left button\r\n        Button leftButton = (Button) findViewById(R.id.leftButton);\r\n        leftButton.setX(50);\r\n        leftButton.setY(50);\r\n        leftButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n\r\n                moveLeft(playerImage);\r\n\r\n            }\r\n        });\r\n\r\n        //The action events for the rightButton and the placement of the right button\r\n        Button rightButton = (Button) findViewById(R.id.rightButton);\r\n        rightButton.setX(1050);\r\n        rightButton.setY(50);\r\n        rightButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                moveRight(playerImage);\r\n            }\r\n        });\r\n\r\n\r\n        //The action events for the upbutton and the placement of the up button\r\n        Button upButton = (Button) findViewById(R.id.upButton);\r\n        upButton.setX(500);\r\n        upButton.setY(50);\r\n\r\n\r\n        upButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                moveUp(playerImage);\r\n            }\r\n        });\r\n\r\n        //The action events for the downbutton and the placement of the down button\r\n        Button downButton = (Button) findViewById(R.id.downButton);\r\n        downButton.setX(500);\r\n        downButton.setY(300);\r\n\r\n\r\n        downButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                moveDown(playerImage);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * A method for creating the functionality moving left with the left button\r\n     * @param playerImage the image of the player on the screen\r\n     */\r\n    public void moveLeft(ImageView playerImage) {\r\n        final FrameLayout iv = (FrameLayout) findViewById(R.id.mainFrame);\r\n        finalHeight = iv.getMeasuredHeight();\r\n        finalWidth = iv.getMeasuredWidth();\r\n\r\n        if (playerImage.getX() > 10) {\r\n            playerImage.setX(playerImage.getX() - 30);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * A method for creating the functionality moving right with the right button\r\n     * @param playerImage the image of the player on the screen\r\n     */\r\n    public void moveRight(ImageView playerImage) {\r\n        final FrameLayout iv = (FrameLayout) findViewById(R.id.mainFrame);\r\n        finalHeight = iv.getMeasuredHeight();\r\n        finalWidth = iv.getMeasuredWidth();\r\n\r\n        if (playerImage.getX() < finalWidth - 300) {\r\n            playerImage.setX(playerImage.getX() + 30);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * A method for creating the functionality moving up with the up button\r\n     * @param playerImage the image of the player on the screen\r\n     */\r\n    public void moveUp(ImageView playerImage) {\r\n        final FrameLayout iv = (FrameLayout) findViewById(R.id.mainFrame);\r\n        finalHeight = iv.getMeasuredHeight();\r\n        finalWidth = iv.getMeasuredWidth();\r\n\r\n        if (playerImage.getY() > finalHeight - 2200) {\r\n            playerImage.setY(playerImage.getY() - 30);\r\n            System.out.println(\"Player height :\" + playerImage.getY());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     *  A method for creating the functionality moving down with the down button\r\n     * @param playerImage the image of the player on the screen\r\n     */\r\n    public void moveDown(ImageView playerImage) {\r\n\r\n\r\n        if (playerImage.getY() < 2172) {\r\n            playerImage.setY(playerImage.getY() + 30);\r\n            System.out.println(\"Player height :\" + 2200);\r\n            System.out.println(\"Player height :\" + playerImage.getY());\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void createGrid(LinearLayout gridContainer) {\r\n        gridContainer.removeAllViews();\r\n        int blockSize = 160;\r\n        for (int row = 0; row < 16; row++) {\r\n            LinearLayout rowBlock = new LinearLayout(this);\r\n\r\n            LinearLayout.LayoutParams params1 = new LinearLayout.LayoutParams(blockSize * 9, blockSize);\r\n            params1.weight = 1.0f;\r\n            rowBlock.setLayoutParams(params1);\r\n\r\n            for (int column = 0; column < 9; column++) {\r\n                ImageView gridBlock = new ImageView(this, null);\r\n                GameBlock g = new GameBlock(row, column, gridBlock);\r\n\r\n                LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(blockSize, blockSize);\r\n                params2.weight = 1.0f;\r\n                gridBlock.setLayoutParams(params2);\r\n\r\n                rowBlock.addView(gridBlock);\r\n            }\r\n            gridContainer.addView(rowBlock);\r\n        }\r\n    }\r\n\r\n    public int[] populateGrid() {\r\n    /*\r\n    Goal tile => 3\r\n    Safe tile => 2\r\n    River tile => 1\r\n    Road tile => 0\r\n     */\r\n        int[] rowTypes = new int[16];\r\n\r\n        Random r = new Random();\r\n\r\n        rowTypes[0] = 3;\r\n        rowTypes[15] = 2;\r\n        rowTypes[r.nextInt(3) + 7] = 2;\r\n\r\n        int type = r.nextInt(2);\r\n        for (int i = 1; i < 15; i++) {\r\n            if (rowTypes[i] == 0) {\r\n                rowTypes[i] = type;\r\n            } else {\r\n                if (type == 1) {\r\n                    type = 0;\r\n                } else {\r\n                    type = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        int[] blockOptions = GameBlock.blockOptions;\r\n        for (int i = 0; i < rowTypes.length; i++) {\r\n            GameBlock[] row = Game.gameBlockArray[i];\r\n            for (GameBlock g:row\r\n            ) {\r\n                g.gridBlock.setImageResource(blockOptions[rowTypes[i]]);\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < rowTypes.length; i++) {\r\n            if (rowTypes[i] == 1) {\r\n                GameBlock[] riverRow = Game.gameBlockArray[i];\r\n                int begin = r.nextInt(riverRow.length);\r\n                riverRow[begin].gridBlock.setImageResource(blockOptions[4]);\r\n                riverRow[(begin + 1) % riverRow.length].gridBlock.setImageResource(blockOptions[4]);\r\n                riverRow[(begin + 2) % riverRow.length].gridBlock.setImageResource(blockOptions[4]);\r\n            }\r\n        }\r\n\r\n        return rowTypes;\r\n\r\n    }\r\n\r\n    public void animate(int[] rows) {\r\n        //Constructs a list of rivers and roads on screen\r\n//        ArrayList<LinearLayout> rivers = new ArrayList<>();\r\n        HashMap<Integer, LinearLayout> rivers = new HashMap<>();\r\n        ArrayList<LinearLayout> roads = new ArrayList<>();\r\n        for (int i = 0; i < rows.length; i++) {\r\n            LinearLayout grid = findViewById(R.id.backgroundGrid);\r\n            switch (rows[i]) {\r\n                case 1:\r\n                    rivers.put(i, (LinearLayout) grid.getChildAt(i));\r\n                    break;\r\n                case 0:\r\n                    roads.add((LinearLayout) grid.getChildAt(i));\r\n                    break;\r\n            }\r\n        }\r\n\r\n        //Animates rivers on screen\r\n        for (Integer rowIndex: rivers.keySet()\r\n             ) {\r\n            moveRiver(rowIndex, rivers.get(rowIndex));\r\n        }\r\n\r\n//        for (LinearLayout river : rivers) {\r\n//            moveRiver(river);\r\n//        }\r\n\r\n        //Animates and moves fireballs on screen\r\n        FrameLayout mainFrame = findViewById(R.id.mainFrame);\r\n        for (LinearLayout road : roads) {\r\n            ImageView fireball = new ImageView(this);\r\n            mainFrame.addView(fireball, 1);\r\n            animateFireball(fireball);\r\n            shootFireBall(fireball, road);\r\n        }\r\n    }\r\n\r\n    public void moveRiver(int rowIndex, LinearLayout row) {\r\n        new CountDownTimer(10000, 1000){\r\n                public void onTick(long millisUntilFinished) {\r\n                    //Moves the blocks in the river\r\n                    ImageView oldBlock = (ImageView) row.getChildAt(0);\r\n                    row.removeViewAt(0);\r\n                    row.addView(oldBlock);\r\n                    Game.shiftGameRow(rowIndex, -1);\r\n                }\r\n                public  void onFinish() {\r\n                    moveRiver(rowIndex, row);\r\n                }\r\n        }.start();\r\n    }\r\n\r\n    public void animateFireball(ImageView fireball) {\r\n        FrameLayout.LayoutParams fireballDims = new FrameLayout.LayoutParams(160, 160);\r\n        fireball.setLayoutParams(fireballDims);\r\n        final int[] image = {0};\r\n        final int[] fireBallFrames = {R.drawable.fireball0, R.drawable.fireball1, R.drawable.fireball2, R.drawable.fireball3, R.drawable.fireball4, R.drawable.fireball5, R.drawable.fireball6, R.drawable.fireball7};\r\n        new CountDownTimer(800, 100) {\r\n            public void onTick(long millisUntilFinished) {\r\n                //Changes fireball images\r\n                fireball.setImageResource((fireBallFrames[image[0]]));\r\n                image[0]++;\r\n            }\r\n\r\n            public void onFinish() {\r\n                animateFireball(fireball);\r\n            }\r\n        }.start();\r\n    }\r\n\r\n    public void shootFireBall(ImageView fireball, LinearLayout row) {\r\n        Random rand = new Random();\r\n        int waitOffset = 1 + rand.nextInt(10);\r\n        int waitTime = waitOffset * 1000;\r\n        new CountDownTimer(waitTime, 1000) {\r\n            public void onTick(long millisUntilFinished) {\r\n\r\n            }\r\n\r\n            public void onFinish() {\r\n                fireballMotion(fireball, row);\r\n            }\r\n        }.start();\r\n    }\r\n\r\n    public void fireballMotion(ImageView fireball, LinearLayout row) {\r\n        int rowWidth = row.getWidth();\r\n        int rowY = (int) row.getY();\r\n//        System.out.println(\"Row Width: \" + rowWidth);\r\n//        System.out.println(\"Row Y: \" + rowY);\r\n\r\n        fireball.setY(rowY);\r\n        fireball.setX(rowWidth);\r\n\r\n        int translation = rowWidth / 100;\r\n        new CountDownTimer(15000, 100) {\r\n            public void onTick(long millisUntilFinished) {\r\n                //Moves fireball across screen\r\n                int currentX = (int) fireball.getX();\r\n                fireball.setX(currentX - translation);\r\n\r\n            }\r\n\r\n            public void onFinish() {\r\n                fireballMotion(fireball, row);\r\n            }\r\n        }.start();\r\n    }\r\n\r\n    private int getGameDifficulty() {\r\n        return getIntent().getIntExtra(\"level\", 0);\r\n    }\r\n\r\n    private String getPlayerInfo() {\r\n        return \"k3ll3y|3|1\";\r\n        //return getIntent().getStringExtra(\"player\");\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/team18/GameScreenActivity.java b/app/src/main/java/com/example/team18/GameScreenActivity.java
--- a/app/src/main/java/com/example/team18/GameScreenActivity.java	
+++ b/app/src/main/java/com/example/team18/GameScreenActivity.java	
@@ -361,8 +361,8 @@
     }
 
     private String getPlayerInfo() {
-        return "k3ll3y|3|1";
-        //return getIntent().getStringExtra("player");
+//        return "k3ll3y|3|1";
+        return getIntent().getStringExtra("player");
     }
 
 
